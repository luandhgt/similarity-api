#!/usr/bin/env python3
"""
Test Event Similarity Analysis - Standalone Test Runner

This script tests the event similarity analysis functionality without FastAPI.
Configure the variables below and run to test the complete workflow.
"""

import sys
import os
import asyncio
import logging
from pathlib import Path
from dotenv import load_dotenv
import json

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# =================== TEST CONFIGURATION ===================
# Modify these variables for your test case

# Event Information
EVENT_NAME = "Triarch Trouble"
GAME_CODE = "Rise of Kingdoms"
EVENT_ABOUT = """
# About Triarch Trouble

## Story

As the poleis of ancient Greece grew in size and expanded their territory, they inevitably ran up against other city-states with the same ambitions. To prove their dominion over the Greek world, the three mightiest city-states have dispatched their armies to this vital battlefield. With everything to gain and everything to lose, a fierce and bloody battle looms on the horizon.

The future of the Mediterranean lies in your hands!

## How to Play

In this battle for control over Greece, three armies will cross blades. Faced with ambitious foes, an ever-changing battlefield, and the Fires of War, just remember the most important thing: you must become the Hegemon. Find your allies, gather your forces, and lead your city-state to victory!

## Requirements

Your City Hall must be at least level 11 to take part in Triarch Trouble.

## Matchmaking Rules

1. You can join the Triarch Trouble event by yourself or with a group.
2. For the sake of fairness, participants will be separated, depending on whether or not their kingdom has entered the Season of Conquest.
3. Each match consists of 9 governors, split into 3 teams of 3 governors.
4. If you join the event with a group, you will be placed on the same team as your fellow group members.

## Battle Rules

1. You can only deploy 1 troop to the battlefield.
2. You will be provided units for the match. The types of units depends on the specialties of your troop's primary commander.
3. All troops on the battlefield will periodically be granted a random battlefield skill.
4. The Fires of War will approach the center of the map, dealing continuous damage to troops caught within them. Avoid them as best you can.
5. The Triarch Trouble battlefield is particularly vicious. Troops will gain increased March Speed while marching and will take increased damage in combat. In addition, the effects of surrounding a troop will be greatly increased compared to the regular map.
6. Formation and armament bonuses will only take effect after your kingdom enters Season 3.

## Hegemon Rules

1. Some time after the start of the match, the troop with the most units will become the hegemon troop. It will remain the hegemon troop until it no longer has the most units and it exits combat.
2. The hegemon troop has reduced March Speed but increased damage dealt and damage taken.
3. When the battle ends, the hegemon troop's team will be crowned first place.

## How to Gain Units

1. Mercenaries will spawn across the battlefield. Move your troop near to them to recruit them and gain more units.
2. After defeating enemy troops, you can integrate some of their units into your troop.
3. The more units your troop has, the fewer units you will gain by recruiting mercenaries or defeating enemy troops.
4. If your troop exits combat, it will gradually recover units (up to a certain percentage of its unit count when it entered combat).
5. If your troop is defeated, it will respawn in a random part of the map after a period of time. Your troop's unit count after respawning will be a certain percentage of its unit count when it last entered combat.

## Victory Point Rewards

1. At the end of each match, all members of the hegemon troop's team will receive 4 victory points. Members of the other teams will receive 2 victory points.
2. The more victory points you accumulate, the better your final rewards will be.

## Important Notes

1. If you quit a match midway, you will not earn any victory points for that match.
2. Your victory points will be reset when the event ends.
3. Certain commanders cannot be used until your kingdom has entered the Season of Conquest.
4. You cannot start a new match within 1 hour of the event's end.
5. The following buffs will NOT take effect in the Triarch Trouble battlefield: Item buffs, Holy Site buffs, alliance technology, alliance skills, alliance title buffs, Lost Kingdom buffs, kingdom title buffs, kingdom buffs, and rune buffs.
6. If you go AFK for an extended period of time during a Triarch Trouble battle, you will be briefly banned from Triarch Trouble matchmaking.
"""

# Image Folder Configuration
FOLDER_NAME = "triarch_trouble_rise_of_kingdoms"  # Folder containing test images
SHARED_UPLOADS_PATH = "/media/luanpc/Video/shared/uploads/"  # Base path for uploads
EXPECTED_IMAGE_COUNT = 0  # Expected number of images in folder

# Test Options
VERBOSE_OUTPUT = True  # Print detailed results
SAVE_RESULTS = True   # Save results to JSON file
OUTPUT_FILE = "test_results.json"  # Output file name

# =================== INITIALIZATION FUNCTIONS ===================

async def initialize_services():
    """Initialize all required services for testing"""
    print("üîß Initializing services...")
    
    services = {}
    
    try:
        # Initialize Places365 model
        print("Loading Places365 model...")
        from models.places365 import get_places365_model
        places_model = get_places365_model()
        services['places365'] = places_model is not None
        print(f"‚úÖ Places365 model: {'loaded' if services['places365'] else 'failed'}")
        
        # Initialize Voyage client
        print("Initializing Voyage client...")
        from utils.text_processor import get_voyage_client
        voyage_client = get_voyage_client()
        services['voyage'] = voyage_client is not None
        services['voyage_client'] = voyage_client
        print(f"Voyage client: {'initialized' if services['voyage'] else 'failed'}")
        
        # Initialize Claude service
        print("Testing Claude service...")
        try:
            from services.claude_service import ClaudeService
            # Create Claude service instance properly
            claude_service = ClaudeService()
            claude_status = claude_service.get_usage_stats()
            services['claude'] = True
            services['claude_service'] = claude_service
            print(f"‚úÖ Claude service: ready ({claude_status.get('model', 'unknown model')})")
        except Exception as e:
            services['claude'] = False
            services['claude_service'] = None
            print(f"‚ö†Ô∏è Claude service: {e}")
            if VERBOSE_OUTPUT:
                print(f"   Make sure CLAUDE_API_KEY is set in .env file")
        
        # Initialize Database service (THIS WAS MISSING!)
        print("Initializing Database service...")
        try:
            from services.database_service import DatabaseService
            db_service = DatabaseService()
            await db_service.initialize()
            
            # Test database connection
            db_health = await db_service.health_check()
            services['database'] = db_health.get("status") == "healthy"
            services['database_service'] = db_service
            print(f"‚úÖ Database service: {'connected' if services['database'] else 'failed'}")
        except Exception as e:
            services['database'] = False
            services['database_service'] = None
            print(f"‚ö†Ô∏è Database service: {e}")
        
        # Initialize Event Similarity service (MOVED TO AFTER DATABASE INIT)
        print("Initializing Event Similarity service...")
        try:
            # Check if config files exist first
            config_path = Path("config")
            required_configs = [
                "prompts.yaml", 
                "output_formats.yaml",
                "similarity_prompts.yaml", 
                "similarity_output_formats.yaml"
            ]
            
            missing_configs = []
            for config_file in required_configs:
                if not (config_path / config_file).exists():
                    missing_configs.append(config_file)
            
            if missing_configs:
                print(f"‚ö†Ô∏è Missing config files: {missing_configs}")
                print(f"   Expected location: {config_path.absolute()}/")
            
            # Import required classes
            from services.event_similarity_service import EventSimilarityService
            from utils.prompt_manager import PromptManager
            
            # Check that all dependencies are available
            if not services.get('claude_service'):
                raise Exception("Claude service not available")
            if not services.get('voyage_client'):
                raise Exception("Voyage client not available") 
            if not services.get('database_service'):
                raise Exception("Database service not available")
            
            # Initialize PromptManager
            prompt_manager = PromptManager()
            
            # Create service instance with ALL required dependencies
            event_similarity_service = EventSimilarityService(
                claude_service=services['claude_service'],      # Fixed: pass claude_service
                voyage_client=services['voyage_client'],        # Fixed: pass voyage_client  
                prompt_manager=prompt_manager,                  # Fixed: initialize and pass prompt_manager
                database_service=services['database_service']   # Fixed: ensure database_service exists
            )
            
            # Test service status
            service_status = await event_similarity_service.get_service_status()
            services['event_similarity'] = service_status.get("status") == "operational"
            services['event_similarity_service'] = event_similarity_service
            print(f"‚úÖ Event Similarity service: {'ready' if services['event_similarity'] else 'failed'}")
            
            if VERBOSE_OUTPUT:
                db_status = service_status.get('database_health', {})
                print(f"   Database connected: {db_status.get('status') == 'healthy'}")
                faiss_stats = service_status.get('faiss_stats', {})
                faiss_count = len([k for k, v in faiss_stats.items() if isinstance(v, dict) and v.get('total_vectors', 0) > 0])
                print(f"   FAISS indexes loaded: {faiss_count}")
                
        except ImportError as e:
            services['event_similarity'] = False
            services['event_similarity_service'] = None
            print(f"Event Similarity service - Import Error: {e}")
            if "sklearn" in str(e):
                print(f"   Solution: pip install scikit-learn==1.3.2")
            elif "asyncpg" in str(e):
                print(f"   Solution: pip install asyncpg==0.29.0")
            elif "Dict" in str(e):
                print(f"   Solution: Add 'from typing import Dict' to utils/prompt_manager.py")
                print(f"   File location: utils/prompt_manager.py")
        except Exception as e:
            services['event_similarity'] = False
            services['event_similarity_service'] = None
            if "ufunc" in str(e) or "scipy" in str(e):
                print(f"Event Similarity service - scipy/numpy compatibility issue")
                print(f"   Solution: pip install scipy==1.10.1 numpy==1.24.3")
                print(f"   Or try: pip uninstall numpy scipy -y && pip install numpy==1.24.3 scipy==1.10.1")
            else:
                print(f"Event Similarity service error: {e}")
                if VERBOSE_OUTPUT:
                    logger.exception("Detailed Event Similarity service error:")
        
        return services
        
    except Exception as e:
        print(f"‚ùå Service initialization failed: {e}")
        return {}

def validate_test_configuration():
    """Validate test configuration and folder existence"""
    print("üîç Validating test configuration...")
    
    # Check required environment variables
    required_env_vars = ['CLAUDE_API_KEY', 'VOYAGE_API_KEY', 'DB_HOST', 'DB_USER', 'DB_PASS', 'DB_NAME']
    missing_vars = [var for var in required_env_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå Missing environment variables: {missing_vars}")
        return False
    
    # Check image folder
    folder_path = Path(SHARED_UPLOADS_PATH) / FOLDER_NAME
    if not folder_path.exists():
        print(f"‚ùå Image folder not found: {folder_path}")
        print(f"   Please create the folder and add {EXPECTED_IMAGE_COUNT} test images")
        return False
    
    # Check images in folder
    image_extensions = {'.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.tif'}
    image_files = [
        f for f in folder_path.iterdir() 
        if f.is_file() and f.suffix.lower() in image_extensions
    ]
    
    if len(image_files) == 0:
        print(f"‚ùå No image files found in folder: {folder_path}")
        return False
    
    if len(image_files) != EXPECTED_IMAGE_COUNT:
        print(f"‚ö†Ô∏è Image count mismatch: expected {EXPECTED_IMAGE_COUNT}, found {len(image_files)}")
        print(f"   Found images: {[f.name for f in image_files]}")
        print(f"   Continuing with actual count: {len(image_files)}")
        # We'll use the actual count in the test instead of global modification
    
    print(f"‚úÖ Configuration valid")
    print(f"   Event: {EVENT_NAME}")
    print(f"   Game: {GAME_CODE}")
    print(f"   Images: {EXPECTED_IMAGE_COUNT} files in {folder_path}")
    
    return len(image_files)  # Return actual image count

# =================== TEST EXECUTION ===================

async def run_event_similarity_test(services, actual_image_count):
    """Run the complete event similarity analysis test"""
    print("\nüöÄ Starting Event Similarity Analysis Test...")
    print("=" * 60)
    
    if not services.get('event_similarity_service'):
        print("‚ùå Event Similarity service not available")
        return None
    
    # Prepare request parameters
    test_request = {
        "folder_name": FOLDER_NAME,
        "game_code": GAME_CODE,
        "event_name": EVENT_NAME,
        "about": EVENT_ABOUT,
        "image_count": actual_image_count,  # Use actual count from validation
        "shared_uploads_path": SHARED_UPLOADS_PATH
    }
    
    print("üìã Test Parameters:")
    print(f"   Folder: {test_request['folder_name']}")
    print(f"   Game: {test_request['game_code']}")
    print(f"   Event: {test_request['event_name']}")
    print(f"   Images: {test_request['image_count']}")
    print(f"   Path: {test_request['shared_uploads_path']}")
    print()
    
    try:
        # Run the analysis
        print("üîÑ Running similarity analysis...")
        start_time = asyncio.get_event_loop().time()
        
        result = await services['event_similarity_service'].find_similar_events(
                query_name=test_request['event_name'],        
                query_about=test_request['about'],            
                folder_name=test_request['folder_name'],
                game_code=test_request['game_code'],
                shared_uploads_path=test_request['shared_uploads_path'],
                image_count=test_request['image_count']
        )
        
        end_time = asyncio.get_event_loop().time()
        execution_time = end_time - start_time
        
        print(f"‚úÖ Analysis completed in {execution_time:.2f} seconds")
        
        # Display results
        display_results(result, execution_time)
        
        # Save results if requested
        if SAVE_RESULTS:
            save_test_results(test_request, result, execution_time)
        
        return result
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        logger.exception("Detailed error information:")
        return None

def display_results(result, execution_time):
    """Display test results in a formatted way"""
    print("\nüìä TEST RESULTS")
    print("=" * 60)
    
    # Query event information
    query_event = result.get('query_event', {})
    print("üéØ QUERY EVENT:")
    print(f"   Name: {query_event.get('name', 'N/A')}")
    print(f"   About: {query_event.get('about', 'N/A')[:100]}...")
    
    tags = query_event.get('tags', {})
    print(f"   Tags:")
    print(f"     Family: {tags.get('family', 'N/A')}")
    print(f"     Dynamics: {tags.get('dynamics', 'N/A')}")
    print(f"     Rewards: {tags.get('rewards', 'N/A')}")
    
    if VERBOSE_OUTPUT:
        print(f"   Tag Explanation: {query_event.get('tag_explanation', 'N/A')}")
    
    # Similar events
    similar_events = result.get('similar_events', [])
    print(f"\nüîç SIMILAR EVENTS FOUND: {len(similar_events)}")
    
    if similar_events:
        print("\nTop Similar Events:")
        for i, event in enumerate(similar_events[:5], 1):  # Show top 5
            print(f"\n{i}. {event.get('name', 'N/A')}")
            print(f"   Text Score: {event.get('score_text', 0.0):.3f}")
            print(f"   Image Score: {event.get('score_image', 0.0):.3f}")
            print(f"   Matching Images: {len(event.get('image_faiss_indices', []))} indices")
            
            event_tags = event.get('tags', {})
            print(f"   Tags: {event_tags.get('family', 'N/A')} | {event_tags.get('dynamics', 'N/A')} | {event_tags.get('rewards', 'N/A')}")
            
            if VERBOSE_OUTPUT:
                print(f"   Reason: {event.get('reason', 'N/A')[:150]}...")
                print(f"   About: {event.get('about', 'N/A')[:100]}...")
        
        # Statistics
        text_scores = [e.get('score_text', 0.0) for e in similar_events]
        image_scores = [e.get('score_image', 0.0) for e in similar_events]
        
        print(f"\nüìà STATISTICS:")
        print(f"   Total Events Found: {len(similar_events)}")
        print(f"   Average Text Score: {sum(text_scores)/len(text_scores):.3f}")
        print(f"   Average Image Score: {sum(image_scores)/len(image_scores):.3f}")
        print(f"   Max Text Score: {max(text_scores):.3f}")
        print(f"   Max Image Score: {max(image_scores):.3f}")
        print(f"   Execution Time: {execution_time:.2f} seconds")
    else:
        print("   No similar events found")

def save_test_results(request, result, execution_time):
    """Save test results to JSON file"""
    try:
        output_data = {
            "test_configuration": {
                "timestamp": asyncio.get_event_loop().time(),
                "execution_time_seconds": execution_time,
                "request_parameters": request,
                "config": {
                    "event_name": EVENT_NAME,
                    "game_code": GAME_CODE,
                    "folder_name": FOLDER_NAME,
                    "expected_image_count": EXPECTED_IMAGE_COUNT
                }
            },
            "results": result
        }
        
        with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
            json.dump(output_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ Results saved to: {OUTPUT_FILE}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Failed to save results: {e}")

# =================== MAIN TEST RUNNER ===================

async def main():
    """Main test runner"""
    print("üß™ EVENT SIMILARITY ANALYSIS TEST")
    print("=" * 60)
    print(f"Event: {EVENT_NAME}")
    print(f"Game: {GAME_CODE}")  
    print(f"Folder: {FOLDER_NAME}")
    print("=" * 60)
    
    # Validate configuration
    actual_image_count = validate_test_configuration()
    if not actual_image_count:
        print("‚ùå Configuration validation failed. Please fix the issues above.")
        return
    
    # Initialize services
    services = await initialize_services()
    
    # Check if critical services are ready
    critical_services = ['places365', 'voyage', 'claude', 'database', 'event_similarity']
    missing_services = [s for s in critical_services if not services.get(s, False)]
    
    if missing_services:
        print(f"\n‚ö†Ô∏è Warning: Some services are not available: {missing_services}")
        print("The test may fail or produce incomplete results.")
        
        if 'event_similarity' in missing_services:
            print("‚ùå Event Similarity service is required. Cannot proceed.")
            return
        
        input("Press Enter to continue anyway, or Ctrl+C to abort...")
    
    print(f"\n‚úÖ All services initialized successfully")
    
    # Run the test
    try:
        result = await run_event_similarity_test(services, actual_image_count)
        
        if result:
            print("\nüéâ Test completed successfully!")
        else:
            print("\n‚ùå Test failed!")
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Test interrupted by user")
    except Exception as e:
        print(f"\n‚ùå Unexpected error during test: {e}")
        logger.exception("Detailed error:")
    finally:
        # Cleanup
        if services.get('database_service'):
            try:
                await services['database_service'].close()
                print("üßπ Database connections closed")
            except:
                pass

if __name__ == "__main__":
    # Clear screen for better readability
    os.system('clear' if os.name == 'posix' else 'cls')
    
    # Run the test
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Test aborted by user")
    except Exception as e:
        print(f"\n‚ùå Critical error: {e}")
    
    print("\n" + "=" * 60)
    print("Test completed. Check the output above for results.")